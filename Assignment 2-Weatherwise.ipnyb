{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tom1611/Nhat-Minh-Vu/blob/main/Assignment%202-Weatherwise.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "72e78a05",
      "metadata": {
        "id": "72e78a05"
      },
      "source": [
        "# 🌦️ WeatherWise – Starter Notebook\n",
        "\n",
        "Welcome to your **WeatherWise** project notebook! This scaffold is designed to help you build your weather advisor app using Python, visualisations, and AI-enhanced development.\n",
        "\n",
        "---\n",
        "\n",
        "📄 **Full Assignment Specification**  \n",
        "See [`ASSIGNMENT.md`](ASSIGNMENT.md) or check the LMS for full details.\n",
        "\n",
        "📝 **Quick Refresher**  \n",
        "A one-page summary is available in [`resources/assignment-summary.md`](resources/assignment-summary.md).\n",
        "\n",
        "---\n",
        "\n",
        "🧠 **This Notebook Structure is Optional**  \n",
        "You’re encouraged to reorganise, rename sections, or remove scaffold cells if you prefer — as long as your final version meets the requirements.\n",
        "\n",
        "✅ You may delete this note before submission.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fa8c7f6c",
      "metadata": {
        "id": "fa8c7f6c"
      },
      "source": [
        "## 🧰 Setup and Imports\n",
        "\n",
        "This section imports commonly used packages and installs any additional tools used in the project.\n",
        "\n",
        "- You may not need all of these unless you're using specific features (e.g. visualisations, advanced prompting).\n",
        "- The notebook assumes the following packages are **pre-installed** in the provided environment or installable via pip:\n",
        "  - `requests`, `matplotlib`, `pyinputplus`\n",
        "  - `fetch-my-weather` (for accessing weather data easily)\n",
        "  - `hands-on-ai` (for AI logging, comparisons, or prompting tools)\n",
        "\n",
        "If you're running this notebook in **Google Colab**, uncomment the following lines to install the required packages.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "id": "70c3f3f1",
      "metadata": {
        "id": "70c3f3f1",
        "outputId": "a89e97ae-3851-4acc-b478-b8b1f0d47552",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: fetch-my-weather in /usr/local/lib/python3.12/dist-packages (0.4.0)\n",
            "Requirement already satisfied: requests>=2.25.0 in /usr/local/lib/python3.12/dist-packages (from fetch-my-weather) (2.32.4)\n",
            "Requirement already satisfied: pydantic>=1.8.0 in /usr/local/lib/python3.12/dist-packages (from fetch-my-weather) (2.11.10)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=1.8.0->fetch-my-weather) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>=1.8.0->fetch-my-weather) (2.33.2)\n",
            "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>=1.8.0->fetch-my-weather) (4.15.0)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=1.8.0->fetch-my-weather) (0.4.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests>=2.25.0->fetch-my-weather) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests>=2.25.0->fetch-my-weather) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests>=2.25.0->fetch-my-weather) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests>=2.25.0->fetch-my-weather) (2025.10.5)\n",
            "Requirement already satisfied: hands-on-ai in /usr/local/lib/python3.12/dist-packages (0.2.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (2.32.4)\n",
            "Requirement already satisfied: typer in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (0.19.2)\n",
            "Requirement already satisfied: python-fasthtml in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (0.12.30)\n",
            "Requirement already satisfied: python-docx in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (1.2.0)\n",
            "Requirement already satisfied: pymupdf in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (1.26.5)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (1.6.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (2.0.2)\n",
            "Requirement already satisfied: instructor>=1.11.0 in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (1.11.3)\n",
            "Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.12/dist-packages (from hands-on-ai) (2.11.10)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.9.1 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (3.13.0)\n",
            "Requirement already satisfied: diskcache>=5.6.3 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (5.6.3)\n",
            "Requirement already satisfied: docstring-parser<1.0,>=0.16 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (0.17.0)\n",
            "Requirement already satisfied: jinja2<4.0.0,>=3.1.4 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (3.1.6)\n",
            "Requirement already satisfied: jiter<0.11,>=0.6.1 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (0.10.0)\n",
            "Requirement already satisfied: openai<2.0.0,>=1.70.0 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (1.109.1)\n",
            "Requirement already satisfied: pydantic-core<3.0.0,>=2.18.0 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (2.33.2)\n",
            "Requirement already satisfied: rich<15.0.0,>=13.7.0 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (13.9.4)\n",
            "Requirement already satisfied: tenacity<10.0.0,>=8.2.3 in /usr/local/lib/python3.12/dist-packages (from instructor>=1.11.0->hands-on-ai) (8.5.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.0->hands-on-ai) (0.7.0)\n",
            "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.0->hands-on-ai) (4.15.0)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.0->hands-on-ai) (0.4.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests->hands-on-ai) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests->hands-on-ai) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests->hands-on-ai) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests->hands-on-ai) (2025.10.5)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.12/dist-packages (from typer->hands-on-ai) (8.3.0)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.12/dist-packages (from typer->hands-on-ai) (1.5.4)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from python-docx->hands-on-ai) (5.4.0)\n",
            "Requirement already satisfied: fastcore>=1.8.1 in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (1.8.12)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (2.9.0.post0)\n",
            "Requirement already satisfied: starlette>0.33 in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (0.48.0)\n",
            "Requirement already satisfied: oauthlib in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (3.3.1)\n",
            "Requirement already satisfied: itsdangerous in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (2.2.0)\n",
            "Requirement already satisfied: uvicorn>=0.30 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (0.37.0)\n",
            "Requirement already satisfied: httpx in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (0.28.1)\n",
            "Requirement already satisfied: fastlite>=0.1.1 in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (0.2.1)\n",
            "Requirement already satisfied: python-multipart in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (0.0.20)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.12/dist-packages (from python-fasthtml->hands-on-ai) (4.13.5)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn->hands-on-ai) (1.16.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn->hands-on-ai) (1.5.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn->hands-on-ai) (3.6.0)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (1.4.0)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (25.4.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (1.8.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (6.7.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (0.4.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.9.1->instructor>=1.11.0->hands-on-ai) (1.22.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from fastcore>=1.8.1->python-fasthtml->hands-on-ai) (25.0)\n",
            "Requirement already satisfied: apswutils>=0.1.0 in /usr/local/lib/python3.12/dist-packages (from fastlite>=0.1.1->python-fasthtml->hands-on-ai) (0.1.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2<4.0.0,>=3.1.4->instructor>=1.11.0->hands-on-ai) (3.0.3)\n",
            "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.12/dist-packages (from openai<2.0.0,>=1.70.0->instructor>=1.11.0->hands-on-ai) (4.11.0)\n",
            "Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.12/dist-packages (from openai<2.0.0,>=1.70.0->instructor>=1.11.0->hands-on-ai) (1.9.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.12/dist-packages (from openai<2.0.0,>=1.70.0->instructor>=1.11.0->hands-on-ai) (1.3.1)\n",
            "Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.12/dist-packages (from openai<2.0.0,>=1.70.0->instructor>=1.11.0->hands-on-ai) (4.67.1)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.12/dist-packages (from httpx->python-fasthtml->hands-on-ai) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.12/dist-packages (from httpcore==1.*->httpx->python-fasthtml->hands-on-ai) (0.16.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.12/dist-packages (from rich<15.0.0,>=13.7.0->instructor>=1.11.0->hands-on-ai) (4.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.12/dist-packages (from rich<15.0.0,>=13.7.0->instructor>=1.11.0->hands-on-ai) (2.19.2)\n",
            "Requirement already satisfied: httptools>=0.6.3 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (0.7.1)\n",
            "Requirement already satisfied: python-dotenv>=0.13 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (1.1.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (6.0.3)\n",
            "Requirement already satisfied: uvloop>=0.15.1 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (0.22.1)\n",
            "Requirement already satisfied: watchfiles>=0.13 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (1.1.1)\n",
            "Requirement already satisfied: websockets>=10.4 in /usr/local/lib/python3.12/dist-packages (from uvicorn[standard]>=0.30->python-fasthtml->hands-on-ai) (15.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.12/dist-packages (from beautifulsoup4->python-fasthtml->hands-on-ai) (2.8)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil->python-fasthtml->hands-on-ai) (1.17.0)\n",
            "Requirement already satisfied: apsw in /usr/local/lib/python3.12/dist-packages (from apswutils>=0.1.0->fastlite>=0.1.1->python-fasthtml->hands-on-ai) (3.50.4.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.12/dist-packages (from markdown-it-py>=2.2.0->rich<15.0.0,>=13.7.0->instructor>=1.11.0->hands-on-ai) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install fetch-my-weather\n",
        "!pip install hands-on-ai\n",
        "!pip install requests ipywidgets matplotlib ipyleaflet geopy pyinputplus --quiet\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "os.environ['HANDS_ON_AI_SERVER'] = 'http://ollama.serveur.au'\n",
        "os.environ['HANDS_ON_AI_MODEL'] = 'granite3.2'\n",
        "os.environ['HANDS_ON_AI_API_KEY'] = '913d9b3e94be4cb5a56dedcd7fe9f8ac'\n",
        "\n",
        "# --- Weather API Setup ---\n",
        "BASE_URL = 'https://api.openweathermap.org/data/2.5/'\n",
        "API_KEY = '913d9b3e94be4cb5a56dedcd7fe9f8ac'\n",
        "\n",
        "# --- Global Defaults ---\n",
        "user_preferences = {\"units\": \"metric\"}\n",
        "weather_data = None\n",
        "\n"
      ],
      "metadata": {
        "id": "B2JKlJfrGgIb"
      },
      "id": "B2JKlJfrGgIb",
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "59ae7543",
      "metadata": {
        "id": "59ae7543"
      },
      "source": [
        "## 📦 Setup and Configuration\n",
        "Import required packages and setup environment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "id": "f1dd051e",
      "metadata": {
        "id": "f1dd051e"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "import pyinputplus as pyip\n",
        "\n",
        "# Import after installing (if needed)\n",
        "from fetch_my_weather import get_weather\n",
        "from hands_on_ai.chat import get_response\n",
        "\n",
        "# Interface & Visualization\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output\n",
        "from ipyleaflet import Map, Marker\n",
        "\n",
        "# Geocoding services\n",
        "from geopy.geocoders import Nominatim\n",
        "from geopy.exc import GeocoderTimedOut, GeocoderServiceError\n",
        "from datetime import datetime, timedelta\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f736ade3",
      "metadata": {
        "id": "f736ade3"
      },
      "source": [
        "## 🌤️ Weather Data Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "id": "7a2c7cd0",
      "metadata": {
        "id": "7a2c7cd0"
      },
      "outputs": [],
      "source": [
        "# Define get_weather_data() function here\n",
        "def get_weather_data(location, forecast_days=5):\n",
        "    \"\"\"\n",
        "    Retrieve weather data for a specified location.\n",
        "\n",
        "    Args:\n",
        "        location (str): City or location name\n",
        "        forecast_days (int): Number of days to forecast (1-5)\n",
        "\n",
        "    Returns:\n",
        "        dict: Weather data including current conditions and forecast\n",
        "    \"\"\"\n",
        "\n",
        "#display_welcome()\n",
        "\n",
        "def display_welcome():\n",
        "    clear_output(wait=True)\n",
        "    print(\"🌤️ Welcome to WeatherWise Advisor\")\n",
        "    print(\"Get accurate forecasts, insights, and advice at your fingertips.\\n\")\n",
        "\n",
        "\n",
        "def is_valid_location(location):\n",
        "    return bool(location and len(location.strip()) > 2)\n",
        "\n",
        "\n",
        "\n",
        "import time\n",
        "\n",
        "def get_weather_data(location, forecast_days=5, units='metric'):\n",
        "    \"\"\"\n",
        "    Fetch current and forecast weather data from OpenWeatherMap.\n",
        "    \"\"\"\n",
        "\n",
        "    time.sleep(0.7)  # simulate loading\n",
        "    current_url = f\"{BASE_URL}weather?q={location}&appid={API_KEY}&units={units}\"\n",
        "    forecast_url = f\"{BASE_URL}forecast?q={location}&appid={API_KEY}&units={units}&cnt={forecast_days * 8}\"\n",
        "\n",
        "    current_response = requests.get(current_url)\n",
        "    forecast_response = requests.get(forecast_url)\n",
        "\n",
        "    if current_response.status_code == 200 and forecast_response.status_code == 200:\n",
        "        current = current_response.json()\n",
        "        temp = current['main']['temp']\n",
        "        desc = current['weather'][0]['description']\n",
        "        humidity = current['main']['humidity']\n",
        "        wind = current['wind']['speed']\n",
        "        unit = \"°C\" if units == \"metric\" else \"°F\"\n",
        "\n",
        "\n",
        "        return {\n",
        "            'current': current_response.json(),\n",
        "            'forecast': forecast_response.json()\n",
        "        }\n",
        "    else:\n",
        "        print(\"⚠️ Unable to retrieve data — please recheck your city name or internet connection.\")\n",
        "        return None\n",
        "\n",
        "# ✅ LOCATION SELECTION\n",
        "def get_location_method():\n",
        "    clear_output(wait=True)\n",
        "    display_welcome()\n",
        "\n",
        "    method_selector = widgets.ToggleButtons(\n",
        "        options=[('🖊️ Input City Name', 'manual'), ('🗺️ Select from Map', 'map')],\n",
        "        description='📍 How would you like to set your location?',\n",
        "        style={'description_width': 'initial'},\n",
        "    )\n",
        "    continue_button = widgets.Button(\n",
        "        description=\"Next➡️\",\n",
        "        button_style='primary',\n",
        "        layout=widgets.Layout(width='auto')\n",
        "    )\n",
        "\n",
        "    def on_continue_clicked(_):\n",
        "        method = method_selector.value\n",
        "        clear_output(wait=True)\n",
        "        if method == 'manual':\n",
        "            manual_location_input()\n",
        "        elif method == 'map':\n",
        "            map_location_input()\n",
        "\n",
        "    continue_button.on_click(on_continue_clicked)\n",
        "    display(method_selector, continue_button)\n",
        "\n",
        "# ✅ MANUAL INPUT\n",
        "def manual_location_input():\n",
        "    global user_preferences\n",
        "    default_city = user_preferences.get(\"last_city\", \"\")\n",
        "\n",
        "    location_input = widgets.Text(\n",
        "        value=default_city,\n",
        "        description=\"🌍 City name:\",\n",
        "        style={'description_width': 'initial'},\n",
        "        layout=widgets.Layout(width='auto')\n",
        "    )\n",
        "\n",
        "    confirm_button = widgets.Button(\n",
        "        description=\"Confirm\",\n",
        "        button_style='success',\n",
        "        layout=widgets.Layout(width='auto')\n",
        "    )\n",
        "\n",
        "    def on_confirm_clicked(_):\n",
        "        global user_preferences\n",
        "        location = location_input.value\n",
        "        validation_data = get_weather_data(location, units=user_preferences.get(\"units\", \"metric\"))\n",
        "        if validation_data:\n",
        "            get_preferred_units(location)\n",
        "        else:\n",
        "            clear_output(wait=True)\n",
        "            print(\"🚫 City not found. Please check spelling and try again.\")\n",
        "            manual_location_input()\n",
        "\n",
        "    confirm_button.on_click(on_confirm_clicked)\n",
        "    display(location_input, confirm_button)\n",
        "\n",
        "# ✅ MAP INPUT\n",
        "def map_location_input():\n",
        "    m = Map(center=(20, 0), zoom=2)\n",
        "    marker = Marker()\n",
        "    m.add_layer(marker)\n",
        "\n",
        "    instructions = widgets.Label(\"🗺️ Click anywhere on the map to set your location.\")\n",
        "\n",
        "    def handle_map_click(**kwargs):\n",
        "        if kwargs.get('type') == 'click':\n",
        "            latlon = kwargs.get('coordinates')\n",
        "            if not latlon:\n",
        "                return\n",
        "            lat, lon = latlon\n",
        "            marker.location = (lat, lon)\n",
        "            get_location_name_from_coordinates(lat, lon)\n",
        "\n",
        "    m.on_interaction(handle_map_click)\n",
        "    display(instructions, m)\n",
        "\n",
        "# ✅ GEOLOCATION\n",
        "def get_location_name_from_coordinates(lat, lon):\n",
        "    geolocator = Nominatim(user_agent=\"weatherwise\")\n",
        "    try:\n",
        "        location = geolocator.reverse((lat, lon), timeout=10)\n",
        "        if location and location.address:\n",
        "            addr = location.raw.get('address', {})\n",
        "            city_name = (\n",
        "                addr.get('city')\n",
        "                or addr.get('town')\n",
        "                or addr.get('village')\n",
        "                or addr.get('state')\n",
        "            )\n",
        "            if city_name:\n",
        "                get_preferred_units(city_name)\n",
        "            else:\n",
        "                print(\"⚠️ Could not detect city name. Try typing manually.\")\n",
        "                get_location_method()\n",
        "        else:\n",
        "            print(\"⚠️ Could not determine city name. Try again.\")\n",
        "            get_location_method()\n",
        "    except (GeocoderTimedOut, GeocoderServiceError):\n",
        "        print(\"⏳ Map service timeout. Please try again shortly.\")\n",
        "        get_location_method()\n",
        "\n",
        "# ✅ UNIT SELECTION\n",
        "def get_preferred_units(location):\n",
        "    unit_selector = widgets.ToggleButtons(\n",
        "        options=[('🌡️ Celsius (°C)', 'metric'), ('🔥 Fahrenheit (°F)', 'imperial')],\n",
        "        description='Choose temperature unit:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    confirm_btn = widgets.Button(description=\"Continue ➡️\", button_style='primary')\n",
        "\n",
        "    def on_confirm(_):\n",
        "        global user_preferences, weather_data\n",
        "        user_preferences['units'] = unit_selector.value\n",
        "        clear_output(wait=True)\n",
        "\n",
        "        # ✅ FIXED: Removed duplicate printing inside this section\n",
        "        weather_data = get_weather_data(location, units=user_preferences['units'])\n",
        "        print(f\"✅ Location successfully set: {location}\")\n",
        "        app = WeatherWiseApp(location)\n",
        "        app.display_current_weather()\n",
        "\n",
        "    confirm_btn.on_click(on_confirm)\n",
        "    display(unit_selector, confirm_btn)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a744fdc",
      "metadata": {
        "id": "8a744fdc"
      },
      "source": [
        "## 📊 Visualisation Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "id": "9dc3bf85",
      "metadata": {
        "id": "9dc3bf85"
      },
      "outputs": [],
      "source": [
        "# Define create_temperature_visualisation() and create_precipitation_visualisation() here\n",
        "def create_temperature_visualisation(weather_data, output_type='display'):\n",
        "    \"\"\"\n",
        "    Create visualisation of temperature data.\n",
        "\n",
        "    Args:\n",
        "        weather_data (dict): The processed weather data\n",
        "        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure\n",
        "\n",
        "    Returns:\n",
        "        If output_type is 'figure', returns the matplotlib figure object\n",
        "        Otherwise, displays the visualisation in the notebook\n",
        "    \"\"\"\n",
        "\n",
        "def create_temperature_visualisation(weather_data, output_type='display'):\n",
        "    temps = []\n",
        "    times = []\n",
        "    for entry in weather_data['forecast']['list']:\n",
        "        temps.append(entry['main']['temp'])\n",
        "        times.append(entry['dt_txt'])\n",
        "\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    plt.plot(times, temps, marker='o')\n",
        "    plt.title('Temperature Forecast')\n",
        "    plt.xlabel('Date & Time')\n",
        "    plt.ylabel(f\"Temperature ({'°C' if user_preferences['units'] == 'metric' else '°F'})\")\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    \"\"\"\n",
        "    Create visualisation of precipitation data.\n",
        "\n",
        "    Args:\n",
        "        weather_data (dict): The processed weather data\n",
        "        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure\n",
        "\n",
        "    Returns:\n",
        "        If output_type is 'figure', returns the matplotlib figure object\n",
        "        Otherwise, displays the visualisation in the notebook\n",
        "    \"\"\"\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    rain_amounts = []\n",
        "    times = []\n",
        "    for entry in weather_data['forecast']['list']:\n",
        "        rain = entry.get('rain', {}).get('3h', 0)\n",
        "        rain_amounts.append(rain)\n",
        "        times.append(entry['dt_txt'])\n",
        "\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    plt.bar(times, rain_amounts)\n",
        "    plt.title('Precipitation Forecast')\n",
        "    plt.xlabel('Date & Time')\n",
        "    plt.ylabel('Rain (mm)')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()"
      ],
      "metadata": {
        "id": "HpOlQylYG5Ho"
      },
      "id": "HpOlQylYG5Ho",
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "9f95d160",
      "metadata": {
        "id": "9f95d160"
      },
      "source": [
        "## 🤖 Natural Language Processing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "id": "bcc5833e",
      "metadata": {
        "id": "bcc5833e"
      },
      "outputs": [],
      "source": [
        "def parse_weather_question(question):\n",
        "    \"\"\"\n",
        "    Interprets a user's natural language weather query and determines the most relevant\n",
        "    weather category and tool to use for generating a response.\n",
        "    \"\"\"\n",
        "    reasoning = f\"Understanding user intent from: '{question}'.\"\n",
        "    tools = []\n",
        "    text = question.lower()\n",
        "\n",
        "    # 🌡️ Temperature / climate related\n",
        "    if any(term in text for term in ['heat', 'chill', 'how warm', 'how cold', 'degree']):\n",
        "        attribute = 'temperature'\n",
        "        tools.append('fetch_current_weather')\n",
        "\n",
        "    # 🌧️ Rain, drizzle, or precipitation\n",
        "    elif any(term in text for term in ['rain', 'drizzle', 'storm', 'wet weather', 'umbrella']):\n",
        "        attribute = 'rain'\n",
        "        if any(phrase in text for phrase in ['forecast', 'next few days', 'coming days', 'upcoming']):\n",
        "            tools.append('show_precipitation_forecast')\n",
        "        else:\n",
        "            tools.append('fetch_current_weather')\n",
        "\n",
        "    # 🌬️ Wind-related\n",
        "    elif any(term in text for term in ['windy', 'strong wind', 'breeze', 'gusty', 'airflow']):\n",
        "        attribute = 'wind'\n",
        "        tools.append('fetch_current_weather')\n",
        "\n",
        "    # 🏕️ Outdoor safety / hiking\n",
        "    elif any(term in text for term in ['outdoor', 'hike', 'hiking', 'camp', 'safe outside']):\n",
        "        attribute = 'hiking'\n",
        "        tools.append('evaluate_hiking_condition')\n",
        "\n",
        "    # 📅 Forecast / future conditions\n",
        "    elif any(term in text for term in ['forecast', 'prediction', 'later weather', 'future days']):\n",
        "        attribute = 'forecast'\n",
        "        tools.append('show_temperature_forecast')\n",
        "\n",
        "    # ❓ If unclear, ask for clarification\n",
        "    else:\n",
        "        attribute = 'unknown'\n",
        "        tools.append('clarify_question')\n",
        "\n",
        "    parsed = {\n",
        "        'reasoning': reasoning,\n",
        "        'attribute': attribute,\n",
        "        'tools': tools\n",
        "    }\n",
        "\n",
        "    return parsed\n",
        "\n",
        "\n",
        "def generate_weather_response(parsed_question, weather_data):\n",
        "    \"\"\"\n",
        "    Generates a descriptive weather response based on parsed reasoning and data.\n",
        "    \"\"\"\n",
        "    attribute = parsed_question['attribute']\n",
        "    tools = parsed_question['tools']\n",
        "    reasoning = parsed_question['reasoning']\n",
        "\n",
        "    current = weather_data['current']\n",
        "    forecast = weather_data['forecast']\n",
        "    temp_unit = \"°C\" if user_preferences['units'] == 'metric' else \"°F\"\n",
        "\n",
        "    response = \"\"\n",
        "\n",
        "    for tool in tools:\n",
        "        if tool == 'fetch_current_weather':\n",
        "            weather_desc = current.get('weather', [{}])[0].get('description', 'N/A')\n",
        "            temp = current.get('main', {}).get('temp', 'N/A')\n",
        "            wind = current.get('wind', {}).get('speed', 'N/A')\n",
        "            humidity = current.get('main', {}).get('humidity', 'N/A')\n",
        "\n",
        "            if attribute == 'temperature':\n",
        "                response += f\"The temperature is currently {temp}{temp_unit} with {weather_desc}.\\n\"\n",
        "            elif attribute == 'rain':\n",
        "                response += f\"It’s currently {weather_desc}. Don’t forget a raincoat if you’re heading out!\\n\"\n",
        "            elif attribute == 'wind':\n",
        "                response += f\"Wind speed: around {wind} m/s. Stay cautious if you’re outside.\\n\"\n",
        "            else:\n",
        "                response += f\"The current condition is {weather_desc} at {temp}{temp_unit}.\\n\"\n",
        "\n",
        "        elif tool == 'show_temperature_forecast':\n",
        "            fig = create_temperature_visualisation(weather_data, output_type='figure')\n",
        "            response += \"Here’s a quick look at the temperature outlook for the coming days.\\n\"\n",
        "            display(fig)\n",
        "\n",
        "        elif tool == 'show_precipitation_forecast':\n",
        "            fig = create_precipitation_visualisation(weather_data, output_type='figure')\n",
        "            response += \"Below is the expected rainfall forecast.\\n\"\n",
        "            display(fig)\n",
        "\n",
        "        elif tool == 'evaluate_hiking_condition':\n",
        "            weather_desc = current.get('weather', [{}])[0].get('description', 'N/A')\n",
        "            wind = current.get('wind', {}).get('speed', 10)\n",
        "            if weather_desc in ['clear sky', 'few clouds'] and wind < 5:\n",
        "                response += \"✅ Great day for outdoor activities — calm breeze and clear skies.\\n\"\n",
        "            else:\n",
        "                response += \"⚠️ Not the best weather for hiking today. Better stay inside.\\n\"\n",
        "\n",
        "        elif tool == 'clarify_question':\n",
        "            response += \"❓ Could you please clarify what you’d like to know about the weather?\\n\"\n",
        "\n",
        "        else:\n",
        "            response += \"⚙️ Sorry, I couldn’t find a matching weather category for your question.\\n\"\n",
        "\n",
        "    return response\n",
        "\n",
        "\n",
        "def create_temperature_visualisation(weather_data, output_type='display'):\n",
        "    temps = []\n",
        "    times = []\n",
        "    for entry in weather_data['forecast']['list']:\n",
        "        temps.append(entry['main']['temp'])\n",
        "        times.append(entry['dt_txt'])\n",
        "\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    plt.plot(times, temps, marker='o')\n",
        "    plt.title('Temperature Outlook')\n",
        "    plt.xlabel('Date & Time')\n",
        "    plt.ylabel(f\"Temperature ({'°C' if user_preferences['units'] == 'metric' else '°F'})\")\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "\n",
        "\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    rain_amounts = []\n",
        "    times = []\n",
        "    for entry in weather_data['forecast']['list']:\n",
        "        rain = entry.get('rain', {}).get('3h', 0)\n",
        "        rain_amounts.append(rain)\n",
        "        times.append(entry['dt_txt'])\n",
        "\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    plt.bar(times, rain_amounts)\n",
        "    plt.title('Rainfall Projection')\n",
        "    plt.xlabel('Date & Time')\n",
        "    plt.ylabel('Rainfall (mm)')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d85225e",
      "metadata": {
        "id": "0d85225e"
      },
      "source": [
        "## 🧭 User Interface"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "id": "fa6cb0f6",
      "metadata": {
        "id": "fa6cb0f6"
      },
      "outputs": [],
      "source": [
        "class WeatherWiseApp:\n",
        "    def __init__(self, location=None):\n",
        "        if not location:\n",
        "            display_welcome()\n",
        "            get_location_method()\n",
        "        else:\n",
        "            self.location = location\n",
        "            self.weather_data = None\n",
        "            self.load_weather_data()\n",
        "            self.build_menu()\n",
        "\n",
        "    def load_weather_data(self):\n",
        "        data = get_weather_data(self.location, units=user_preferences.get(\"units\", \"metric\"))\n",
        "        if data:\n",
        "            self.weather_data = data\n",
        "        else:\n",
        "            print(\"⚠️ Failed to retrieve data. Please try again later.\")\n",
        "\n",
        "    def build_menu(self):\n",
        "        self.menu = widgets.Dropdown(\n",
        "            options=[\n",
        "                (\"Select an option\", 0),\n",
        "                (\"View current weather\", 1),\n",
        "                (\"See weather forecast\", 2),\n",
        "                (\"Ask a weather-related question\", 3),\n",
        "                (\"Change location\", 4),\n",
        "                (\"Exit WeatherWise Advisor\", 5)\n",
        "            ],\n",
        "            description='Menu:',\n",
        "            style={'description_width': 'initial'}\n",
        "        )\n",
        "        self.menu.observe(self.menu_handler, names='value')\n",
        "        display(self.menu)\n",
        "\n",
        "    def menu_handler(self, change):\n",
        "        if change['name'] != 'value' or change['new'] == change['old']:\n",
        "            return\n",
        "\n",
        "        clear_output(wait=True)\n",
        "        display(self.menu)\n",
        "\n",
        "        if change['new'] == 1:\n",
        "            self.display_current_weather()\n",
        "        elif change['new'] == 2:\n",
        "            self.display_forecast()\n",
        "        elif change['new'] == 3:\n",
        "            self.ask_question()\n",
        "        elif change['new'] == 4:\n",
        "            get_location_method()\n",
        "        elif change['new'] == 5:\n",
        "            print(\"⛅ Thanks for using WeatherWise! Stay sunny, stay happy, and stay weather-ready! 🌈\")\n",
        "\n",
        "    def display_current_weather(self):\n",
        "        if not self.weather_data:\n",
        "            print(\"Weather data is not available.\")\n",
        "            return\n",
        "\n",
        "        current = self.weather_data['current']\n",
        "        desc = current['weather'][0]['description']\n",
        "        temp = current['main']['temp']\n",
        "        feels_like = current['main']['feels_like']\n",
        "        humidity = current['main']['humidity']\n",
        "        wind = current['wind']['speed']\n",
        "        temp_unit = \"°C\" if user_preferences['units'] == 'metric' else \"°F\"\n",
        "\n",
        "        print(f\"{'🌡️':2} Temperature: {temp:<5}{temp_unit} (Feels like {feels_like}{temp_unit})\")\n",
        "        print(f\"{'🌬️':2} Wind Speed:  {wind:<5} m/s\")\n",
        "        print(f\"{'💧':2} Humidity:    {humidity}%\")\n",
        "        print(f\"{'☁️':2} Conditions:  {desc.capitalize()}\\n\")\n",
        "\n",
        "    def display_forecast(self):\n",
        "        if not self.weather_data:\n",
        "            print(\"Weather data is not available.\")\n",
        "            return\n",
        "\n",
        "        print(f\"📈 Forecast for {self.location}:\")\n",
        "        fig1 = create_temperature_visualisation(self.weather_data, output_type='figure')\n",
        "        display(fig1)\n",
        "\n",
        "        fig2 = create_precipitation_visualisation(self.weather_data, output_type='figure')\n",
        "        display(fig2)\n",
        "def ask_question(self):\n",
        "        question_input = widgets.Text(\n",
        "            description=\"Ask about the weather:\",\n",
        "            style={'description_width': 'initial'},\n",
        "            layout=widgets.Layout(width='auto')\n",
        "        )\n",
        "        ask_btn = widgets.Button(description=\"Ask\", button_style='primary')  # Blue button\n",
        "\n",
        "        def on_ask_clicked(_):\n",
        "            question = question_input.value\n",
        "            parsed_question = parse_weather_question(question)\n",
        "            if parsed_question['attribute']:\n",
        "                response = generate_weather_response(parsed_question, self.weather_data)\n",
        "                print(f\"\\nAnswer: {response}\")\n",
        "            else:\n",
        "                print(\"❓I couldn't understand your question. Try something like 'What is the temperature?'\")\n",
        "\n",
        "        ask_btn.on_click(on_ask_clicked)\n",
        "        display(question_input, ask_btn)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d643a53c",
      "metadata": {
        "id": "d643a53c"
      },
      "source": [
        "## 🧩 Main Application Logic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "id": "a9e2e805",
      "metadata": {
        "id": "a9e2e805"
      },
      "outputs": [],
      "source": [
        "# Tie everything together here\n",
        "def generate_weather_response(parsed_question, weather_data):\n",
        "    \"\"\"\n",
        "    Generate a natural language response to a weather question.\n",
        "\n",
        "    Args:\n",
        "        parsed_question (dict): Parsed question data\n",
        "        weather_data (dict): Weather data\n",
        "\n",
        "    Returns:\n",
        "        str: Natural language response\n",
        "    \"\"\"\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fde44479",
      "metadata": {
        "id": "fde44479"
      },
      "source": [
        "## 🧪 Testing and Examples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "id": "4e573901",
      "metadata": {
        "id": "4e573901"
      },
      "outputs": [],
      "source": [
        "# Include sample input/output for each function"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============ Run the WeatherWise App ============\n",
        "launch_weatherwise()\n",
        "get_location_method()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623,
          "referenced_widgets": [
            "0c3db90cd148445a93d5788f49c83832",
            "5fbf88071d5a4191a7b24f219e2c4963",
            "1dc4a4e72edb4db6ba0f87e336720974",
            "dbabe00dcb0d4492bae7e694f531fd5d",
            "adf122c0b05d4e649c2fe690558cd30c",
            "1113ac1be67c43b590410ed767b5436a",
            "6a2cad51b5f749d39f3fa6654bad5615",
            "f0aad1fa689b4d60bc6aa57cbb31cc71",
            "9fff2ebfa96f44e39bfbbb82b876203c",
            "45a1d7f8619640c7ab4ab6335c04b9b6",
            "6215fa9f183c447f8e01827fe03f9c35",
            "87f57b19ea22417d8f1926d1184306a6",
            "326c476063984121b5b1eb0653f28dab",
            "8c20a8e597b446f78a060f4160a1283f",
            "0246fcd54a3c49f4951e8ee0482a3d2b",
            "707cdaeb3027497e813f05df3893421c",
            "4011796642024d6ea1e2a7cd69d588ac",
            "93a3f4a1424b4aeaa7c8c79ba7d793ff",
            "affce6679df44acdab857be4dfe35486",
            "c3d2c0981bd44f5f95b8483ffd0baf8a",
            "9ddf3b7b2fd14df19c708763a58584cc",
            "a3c96554374b45e287631bd68e41685f",
            "3c5d98ca899f497088849315755a6ddd",
            "8dbd336614a244d3a7dfc70f0102da48",
            "8309d0b4360e42c38451fb01af925997",
            "c0d700eb34324cc7af30adb9dca38377",
            "a21ed34003ea4b76ab3a54722b677386",
            "c6be36fde09843f7b657043dd61ad6af",
            "b496d6f7556d4527b7c2efba1c450aec",
            "305ac71d99804d9b9d5d0ca1241525f1",
            "19a3420bfb704241a50931d59230e0da",
            "d59a258ae2e24e859ad9dbae4893190b",
            "b0a8eba0f14947e3837a82de274a0cb1"
          ]
        },
        "id": "5X1qZBCGFZCL",
        "outputId": "cb2f6252-65f8-4f3b-ff8a-96906e683377"
      },
      "id": "5X1qZBCGFZCL",
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Dropdown(description='Menu:', index=3, options=(('Select an option', 0), ('View current weather', 1), ('See we…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8309d0b4360e42c38451fb01af925997"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Text(value='', description='Ask about the weather:', layout=Layout(width='auto'), style=DescriptionStyle(descr…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c6be36fde09843f7b657043dd61ad6af"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(button_style='primary', description='Ask', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "19a3420bfb704241a50931d59230e0da"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Answer: Here’s a quick look at the temperature outlook for the coming days.\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Answer: ⚠️ Not the best weather for hiking today. Better stay inside.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d2885880",
      "metadata": {
        "id": "d2885880"
      },
      "source": [
        "## 🗂️ AI Prompting Log (Optional)\n",
        "Add markdown cells here summarising prompts used or link to AI conversations in the `ai-conversations/` folder."
      ]
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "0c3db90cd148445a93d5788f49c83832": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsModel",
            "_options_labels": [
              "🖊️ Input City Name",
              "🗺️ Select from Map"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ToggleButtonsView",
            "button_style": "",
            "description": "📍 How would you like to set your location?",
            "description_tooltip": null,
            "disabled": false,
            "icons": [],
            "index": 0,
            "layout": "IPY_MODEL_5fbf88071d5a4191a7b24f219e2c4963",
            "style": "IPY_MODEL_1dc4a4e72edb4db6ba0f87e336720974",
            "tooltips": []
          }
        },
        "5fbf88071d5a4191a7b24f219e2c4963": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1dc4a4e72edb4db6ba0f87e336720974": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_width": "",
            "description_width": "initial",
            "font_weight": ""
          }
        },
        "dbabe00dcb0d4492bae7e694f531fd5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Next➡️",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_adf122c0b05d4e649c2fe690558cd30c",
            "style": "IPY_MODEL_1113ac1be67c43b590410ed767b5436a",
            "tooltip": ""
          }
        },
        "adf122c0b05d4e649c2fe690558cd30c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "1113ac1be67c43b590410ed767b5436a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "6a2cad51b5f749d39f3fa6654bad5615": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0aad1fa689b4d60bc6aa57cbb31cc71": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_width": "",
            "description_width": "initial",
            "font_weight": ""
          }
        },
        "9fff2ebfa96f44e39bfbbb82b876203c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "45a1d7f8619640c7ab4ab6335c04b9b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "6215fa9f183c447f8e01827fe03f9c35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsModel",
            "_options_labels": [
              "🖊️ Input City Name",
              "🗺️ Select from Map"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ToggleButtonsView",
            "button_style": "",
            "description": "📍 How would you like to set your location?",
            "description_tooltip": null,
            "disabled": false,
            "icons": [],
            "index": 0,
            "layout": "IPY_MODEL_6a2cad51b5f749d39f3fa6654bad5615",
            "style": "IPY_MODEL_f0aad1fa689b4d60bc6aa57cbb31cc71",
            "tooltips": []
          }
        },
        "87f57b19ea22417d8f1926d1184306a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Next➡️",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_9fff2ebfa96f44e39bfbbb82b876203c",
            "style": "IPY_MODEL_45a1d7f8619640c7ab4ab6335c04b9b6",
            "tooltip": ""
          }
        },
        "326c476063984121b5b1eb0653f28dab": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "8c20a8e597b446f78a060f4160a1283f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "0246fcd54a3c49f4951e8ee0482a3d2b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "707cdaeb3027497e813f05df3893421c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "4011796642024d6ea1e2a7cd69d588ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "🌍 City name:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_326c476063984121b5b1eb0653f28dab",
            "placeholder": "​",
            "style": "IPY_MODEL_8c20a8e597b446f78a060f4160a1283f",
            "value": "Ha Noi"
          }
        },
        "93a3f4a1424b4aeaa7c8c79ba7d793ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "Confirm",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_0246fcd54a3c49f4951e8ee0482a3d2b",
            "style": "IPY_MODEL_707cdaeb3027497e813f05df3893421c",
            "tooltip": ""
          }
        },
        "affce6679df44acdab857be4dfe35486": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c3d2c0981bd44f5f95b8483ffd0baf8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_width": "",
            "description_width": "initial",
            "font_weight": ""
          }
        },
        "9ddf3b7b2fd14df19c708763a58584cc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a3c96554374b45e287631bd68e41685f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "3c5d98ca899f497088849315755a6ddd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonsModel",
            "_options_labels": [
              "🌡️ Celsius (°C)",
              "🔥 Fahrenheit (°F)"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ToggleButtonsView",
            "button_style": "",
            "description": "Choose temperature unit:",
            "description_tooltip": null,
            "disabled": false,
            "icons": [],
            "index": 0,
            "layout": "IPY_MODEL_affce6679df44acdab857be4dfe35486",
            "style": "IPY_MODEL_c3d2c0981bd44f5f95b8483ffd0baf8a",
            "tooltips": []
          }
        },
        "8dbd336614a244d3a7dfc70f0102da48": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Continue ➡️",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_9ddf3b7b2fd14df19c708763a58584cc",
            "style": "IPY_MODEL_a3c96554374b45e287631bd68e41685f",
            "tooltip": ""
          }
        },
        "8309d0b4360e42c38451fb01af925997": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Select an option",
              "View current weather",
              "See weather forecast",
              "Ask a weather-related question",
              "Change location",
              "Exit WeatherWise Advisor"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Menu:",
            "description_tooltip": null,
            "disabled": false,
            "index": 3,
            "layout": "IPY_MODEL_c0d700eb34324cc7af30adb9dca38377",
            "style": "IPY_MODEL_a21ed34003ea4b76ab3a54722b677386"
          }
        },
        "c0d700eb34324cc7af30adb9dca38377": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a21ed34003ea4b76ab3a54722b677386": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "c6be36fde09843f7b657043dd61ad6af": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Ask about the weather:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_b496d6f7556d4527b7c2efba1c450aec",
            "placeholder": "​",
            "style": "IPY_MODEL_305ac71d99804d9b9d5d0ca1241525f1",
            "value": "Is it safe to go camping outdoors in Brisbane right now?"
          }
        },
        "b496d6f7556d4527b7c2efba1c450aec": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "305ac71d99804d9b9d5d0ca1241525f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "19a3420bfb704241a50931d59230e0da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Ask",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_d59a258ae2e24e859ad9dbae4893190b",
            "style": "IPY_MODEL_b0a8eba0f14947e3837a82de274a0cb1",
            "tooltip": ""
          }
        },
        "d59a258ae2e24e859ad9dbae4893190b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b0a8eba0f14947e3837a82de274a0cb1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}